'use client';
import React, {ChangeEvent, FormEvent, useState} from 'react';
import {AnimatePresence, motion} from 'framer-motion';
import WagonCargoData from "@/components/request-form/utils/form-data";
import FormMethods from "@/components/request-form/utils/form-methods";
import ProgressBar from "@/components/request-form/progress-bar";
import FwdButton from "@/components/request-form/buttons/fwd-button";
import BwdButton from "@/components/request-form/buttons/bwd-button";
import SubmitButton from "@/components/request-form/buttons/submit-button";
import InputField from "@/components/request-form/step/input-field";
import Step from "@/components/request-form/step/step";
import RadioInput from "@/components/request-form/step/radio-input";
import {toast} from "react-hot-toast";
import axios from "axios";
import {useRouter} from "next/navigation";

export default function MultiStepForm() {
    const router = useRouter();
    const [step, setStep] = useState<number>(0);
    const [formData, setFormData] = useState<WagonCargoData>({
        requestType: '',
        railWagon: '',
        rail: '',
        station: '',
        departure: '',
        destination: '',
        wagonType: '',
        wagonTypeForCargo: '',
        desiredDirection: '',
        cargoType: '',
        desiredRate: 0,
        wagonRequirements: '',
        name: '',
        phone: '',
        email: ''
    });

    const [preferredContact, setPreferredContact] = useState<string>('phone');

    const handleContactChange = (e: ChangeEvent<HTMLInputElement>) => {
        setPreferredContact(e.target.value);
    };

    function handleSubmit(event: FormEvent<HTMLFormElement>, formData: WagonCargoData, preferredContact: string) {
        event.preventDefault();
        console.log(formData);
        const botToken = "7215757624:AAFpHSlkBTHMgFIM8QQ_gVpCHeOimYq8XKc";
        const chatId = "-4159746367";
        let message: string;
        if (formData.requestType === "–ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–∞") {
            message = `
          üöÇ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${formData.requestType} üöÇ
–î–æ—Ä–æ–≥–∞: ${formData.railWagon}
–°—Ç–∞–Ω—Ü–∏—è: ${formData.station}
–¢–∏–ø –≤–∞–≥–æ–Ω–∞: ${formData.wagonType}\n`;
            if (formData.desiredDirection !== '') {
                message += `–ñ–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${formData.desiredDirection}\n`
            } else {
                message += `–ñ–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n`
            }
        } else {
            message = `
          ü™® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${formData.requestType} ü™®
–î–æ—Ä–æ–≥–∞: ${formData.rail}
–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${formData.departure}
–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${formData.destination}
–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞: ${formData.cargoType}
–¢–∏–ø –≤–∞–≥–æ–Ω–∞: ${formData.wagonTypeForCargo}\n`;
            if (formData.desiredRate != 0) {
                message += `–ñ–µ–ª–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: ${formData.desiredRate}\n`
            } else {
                message += `–ñ–µ–ª–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n`
            }
            if (formData.wagonRequirements !== '') {
                message += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–≥–æ–Ω—É: ${formData.wagonRequirements}\n`
            } else {
                message += `–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–≥–æ–Ω—É: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`
            }
        }
        message += `–ò–º—è: ${formData.name}\n`;

        if (preferredContact === 'phone') {
            message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}`;
        } else {
            message += `Email: ${formData.email}`;
        }
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
        toast.promise(axios.post(url, {
            chat_id: chatId,
            text: message,
        }), {
            loading: '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...',
            success: () => {
                router.push("/");
                return '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!';
            },
            error: (error) => {
                console.error('Error sending message to Telegram:', error);
                return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            }
        })
    };

    const renderStep = () => {
        return (
            <AnimatePresence mode="wait">
                <motion.div
                    key={step}
                    initial={{opacity: 0, x: 50}}
                    animate={{opacity: 1, x: 0}}
                    exit={{opacity: 0, x: -50}}
                    transition={{duration: 0.3, ease: "easeInOut"}}
                    className="flex h-full"
                >
                    {(() => {
                        switch (step) {
                            case 0:
                                return (
                                    <Step title="–¢–∏–ø —É—Å–ª—É–≥–∏">
                                        <RadioInput
                                            label="–ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–∞"
                                            name="requestType"
                                            value="–ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–∞"
                                            checked={formData.requestType === '–ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–∞'}
                                            type="radio"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <RadioInput
                                            label="–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞"
                                            name="requestType"
                                            value="–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞"
                                            checked={formData.requestType === '–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞'}
                                            type="radio"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                    </Step>
                                );
                            case 1:
                                return formData.requestType === '–ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–∞' ? (
                                    <Step title="–ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–∞">
                                        <InputField
                                            label="–£–∫–∞–∂–∏—Ç–µ –¥–æ—Ä–æ–≥—É"
                                            name="railWagon"
                                            value={formData.railWagon}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <InputField
                                            label="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é"
                                            name="station"
                                            value={formData.station}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <InputField
                                            label="–¢–∏–ø –≤–∞–≥–æ–Ω–∞"
                                            name="wagonType"
                                            value={formData.wagonType}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                    </Step>
                                ) : (
                                    <Step title="–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞">
                                        <InputField
                                            label="–£–∫–∞–∂–∏—Ç–µ –¥–æ—Ä–æ–≥—É"
                                            name="rail"
                                            value={formData.rail}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <InputField
                                            label="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
                                            name="departure"
                                            value={formData.departure}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <InputField
                                            label="–£–∫–∞–∂–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
                                            name="destination"
                                            value={formData.destination}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <InputField
                                            label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞"
                                            name="cargoType"
                                            value={formData.cargoType}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <InputField
                                            label="–¢–∏–ø –≤–∞–≥–æ–Ω–∞"
                                            name="wagonTypeForCargo"
                                            value={formData.wagonTypeForCargo}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                    </Step>
                                );
                            case 2:
                                return formData.requestType === '–ü–æ–∏—Å–∫ –≤–∞–≥–æ–Ω–∞' ? (
                                    <Step title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
                                        <InputField
                                            label="–ñ–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
                                            name="desiredDirection"
                                            value={formData.desiredDirection}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                    </Step>
                                ) : (
                                    <Step title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
                                        <div className={"mb-3"}>
                                            <InputField
                                                label="–ñ–µ–ª–∞–µ–º–∞—è —Å—Ç–∞–≤–∫–∞"
                                                name="desiredRate"
                                                value={formData.desiredRate === 0 ? "" : formData.desiredRate}
                                                type="number"
                                                handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                            />
                                        </div>
                                        <div>
                                            <InputField
                                                label="–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –≤–∞–≥–æ–Ω—É"
                                                name="wagonRequirements"
                                                value={formData.wagonRequirements}
                                                type="text"
                                                handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                            />
                                        </div>
                                    </Step>
                                );
                            case 3:
                                return (
                                    <Step title="–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
                                        <InputField
                                            label="–§–ò–û"
                                            name="name"
                                            value={formData.name}
                                            type="text"
                                            handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                        />
                                        <div className="flex justify-start gap-5 mt-5">
                                            <RadioInput
                                                label="–¢–µ–ª–µ—Ñ–æ–Ω"
                                                name="preferredContact"
                                                value="phone"
                                                checked={preferredContact === 'phone'}
                                                type="radio"
                                                handleChange={handleContactChange}
                                            />
                                            <RadioInput
                                                label="Email"
                                                name="preferredContact"
                                                value="email"
                                                checked={preferredContact === 'email'}
                                                type="radio"
                                                handleChange={handleContactChange}
                                            />
                                        </div>
                                        <div className={"mt-3"}>
                                            {preferredContact === 'phone' ? (
                                                <InputField
                                                    label="–¢–µ–ª–µ—Ñ–æ–Ω"
                                                    name="phone"
                                                    value={formData.phone}
                                                    type="tel"
                                                    handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                                />
                                            ) : (
                                                <InputField
                                                    label="Email"
                                                    name="email"
                                                    value={formData.email}
                                                    type="email"
                                                    handleChange={(e) => FormMethods.handleChange(e, formData, setFormData)}
                                                />
                                            )}
                                        </div>
                                    </Step>
                                );
                            default:
                                return null;
                        }
                    })()}
                </motion.div>
            </AnimatePresence>
        );
    };

    return (
        <div className="max-w-md mx-auto mt-10 p-10 border border-gray-300 rounded-lg shadow-md h-[650px]">
            <div className="flex flex-col h-full">
                <form onSubmit={(e) => handleSubmit(e, formData, preferredContact)}
                      className="flex-grow">
                    <ProgressBar step={step}/>
                    {renderStep()}
                </form>
                <div className="mt-4 flex justify-between bg-white sticky bottom-0 p-4 border-t border-gray-200">
                    {step > 0 && (
                        <BwdButton step={step} onClick={(e) => FormMethods.prevStep(e, step, setStep)}/>
                    )}
                    <div className="flex justify-end flex-grow">
                        {step < 3 ? (
                            <FwdButton disabled={!FormMethods.isCurrentStepValid(step, formData)}
                                       onClick={FormMethods.isCurrentStepValid(step, formData) ? (e) => FormMethods.nextStep(e, step, setStep, formData) : undefined}/>
                        ) : (
                            <SubmitButton onClick={(e) => handleSubmit(e, formData, preferredContact)}/>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}